
1)
Changed initial capacity_in_words from 4 to 8 to match 64-byte cache line size.

2)
mod to single bit ops
	_bit_array_get_bit
	_bit_array_set_bit
	_bit_array_clear_bit
	_bit_array_toggle_bit
	_bit_array_assign_bit
If designated bit is out of bounds, resize the bitarr to accomodate it.
NOTE: removed const qualifier from _bit_array_get_bit argument bitarr.

3)
created alias for bit_array_clone: bit_array_dup

4)
new function _bit_array_copy_all(file, line, dst, src)
Copies all of src to dst (index = 0 for both, length = src length).
if src is larger than dst, dst is resized to hold it.

5)
new function bit_array_shift_left_extend(bitarr, shift_dist, fill)
Does a logical shift left, but does not truncate bits on high end.
Resizes bitarr to hold the extra bits.

6)
new functions: bit_array_find_next_clear_bit and
bit_array_find_first_clear_bit
Search for a clear bit in the given bitarr.

7)
allow starting with empty bitarray
removed assert in bit_array_resize so it handles 0 sized bitarr.
Set lower bound on new minimum new capacity to be at least 8 (matches
bit_array_alloc).

NB: This is needed because sometimes you have a large block of bit arrays,
and don't want to go through and "create" or "alloc" every one of them,
especially if some of them may not be used.  It's much easier to just
declare them, ensure they are initialized to 0, and then let the library
allocate storage if it's not already there.

8)
Makefile: changed "make" to $(MAKE). Not every system has gmake as the
default.

9)
Changed gcc builtins from "long" to "long long" types.  Otherwise,
clzl of a 64bit word is wrong.  This may need to be modified to account
for compiling 64-bit (currently libbitarr.a is 32-bit).
Now using: ctzll, clzll, popcountll, parityll.

10)
updated README.md file (a little).

11)
Bug notice:
The save and load routines make assumptions about the endianness of the
system.  This introduces two problems. First, saving and loading
partial words can put the "wrong end" into the file, saving 0's instead
of actual significant bits.  Second, if
saved on one system, and then read on another, your words could come
in "backwards".  This is really bad if the bit count at the head of
the file gets mangled.
The best solution is to a) only write whole words to the file and b)
mark the file with the endianness, so that readers can make adjustments.
However, that would not be backward compatible with existing saved bit arrays.

NOTE: quick rule of programming # 18 - file formats, protocols and documents
should ALWAYS have version numbers.

Fixing this is a bit complicated, given the current constraints. First,
the partial word writes need to take endianness into account, and always
put the significant end into the file.  That's about all we can do on the
save side.  For loading, comparing the actual size of the file to the
size computed from the bit count should reveal if the byte order has
changed.  Once we detect that, the load function can correct the byte
order and do partial word reads correctly.

Currently, only fixed the first problem.  Code now writes the significant
bits to the file, even on BE systems.  Saving and loading files across
different endianness systems is still broken.

12)
new include file: bar.h
Contains macros to convert bit_array function names to short bar* names.

13)
new test file dev/bartest.c
Contains (rough and dirty) test code for the new functions listed above,
and uses the short names in bar.h.  Should be merged with the bit_array_test
code.
The bartest will fail an assert if any of the tests fail, so if it runs to
completion it passes.  Exit value is 0.

14)
created .gitignore
